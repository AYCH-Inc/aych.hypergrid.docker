Unofficial FAQ: Sawtooth Consensus Algorithms (including PoET)
====================
[PREVIOUS_ | HOME_ | NEXT_]

.. contents::

.. Warning::
   **This FAQ was written by a non-expert so may contain both fiction and fact!**

What consensus algorithms does Sawtooth support?
-------------------
dev-mode
    Only suitable for testing TPs with single validator deployments.  Uses a simplified random-leader algorithm for development and testing.  Not for production use
PoET Simulator
    Simulates the SGX environment, and provides CFT similar to Fabric and some other blockchains.  Requires poet-validator-registry TP. Runs on any processor (does not use SGX).  Has Crash Fault Tolerance
PoET SGX
    Takes advantage of SGX in order to provide consensus with Byzantine Fault Tolerance (BFT), like PoW algorithms have, but at very low CPU usage. PoET SGX is the only algorithm that has hardware requirements (a processor supporting SGX)

Does the PoET Simulator implement the same consensus algorithm as PoET SGX?
------------------------------
Yes--they are same same consensus algorithm. The difference is the
PoET Simulator also simulates SGX hardware, allowing PoET to run on non-SGX
hardware.

Are there plans to add other consensus algorithms?
-------------------
Yes. We are in the process of adding a fourth consensus, Raft, and may add other consensus engines.

What is unpluggable consensus?
-------------------
Sawtooth supports unpluggable consensus, meaning you can change the consensus algorithm on the fly,
at a block boundary.
Changing consensus on the fly means it is done without stopping validators, flushing state,
or starting over with a new genesis block.
It is also called Dynamic Consensus.

Can my Sawtooth network have validators with a mixture of SGX PoET or Simulator PoET?
------------------------------------------
No. You need to pick one consensus for all nodes.
But you can change consensus after the network has started.

What cloud services offer SGX?
------------------------------
SGX is available on IBM cloud.
Early access was available on Microsoft Azure, but not now.
AWS does not yet offer SGX.

I get this error during PoET SGX registration: "Machine requires update (probably BIOS) for SGX compliance."
-------------------
During EPID provisioning your computer is trying to get an anonymous credential from Intel. If that process is failing one possibility is that there's a network issue like a proxy. A second possibility is that there's some firmware out of date and so the protocol isn't doing what the backend expects it to. You can check for a firmware / BIOS update for that platform.

SGX also needs to be enabled in the BIOS menu.

Does Sawtooth require a certain processor to be deployed on a network?
-------------------
No.  If you use PoET SGX consensus you need a processor that supports SGX.

Does Sawtooth require SGX?
-------------------
No.  SGX is only needed if you use the hardened version of PoET, PoET SGX.
We also have a version of PoET that just uses conventional software, PoET Simulator,
which runs on a Sawtooth network with any processor.

How is PoET duration time computed?
------------------------
It is ``duration = random_float(0,1) * local_mean_wait_time``

Why does PoET use exponentially-distributed random variable function instead of a uniform function?
------------------------------------
That is to minimize the number of "collisions" in the distribution of a given round of wait timers generated by the population,
where "collision" means two or more timers that are near the minimum of the distribution and within some latency threshold.
The distribution of the random function is shaped by a population estimate of the network, which is determined by examining the last N blocks.
In an ideal world, you want a distribution where one and only one random wait time is around the desired inter block duration, and then there is a decent sized gap.

Where is PoET 1.0 Specification?
----------------------------------
https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/poet.html



[PREVIOUS_ | HOME_ | NEXT_]

.. _PREVIOUS: validator.rst
.. _HOME: README.rst
.. _NEXT: client.rst

Â© Copyright 2018, Intel Corporation.
